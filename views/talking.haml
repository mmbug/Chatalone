.container.shift2.padding-around-large
  .container.messages.rounded-borders.padding-around-medium#message-container
    = partial "messages"
  .container.padding-around-medium
    %form{:action => "send", :method => "post"}
      %input.text-field.f-span7{:type => "text", :name => "message", :id => "message", :autocomplete => "off"}
      %input.text-field.f-span2{:type => "text", :name => "nick", :value => @nick}
      %input.text-field.f-span2{:type => "text", :name => "class", :value => @class}
      %input.hide{:type => "submit"}
:javascript
  function notifyMe() {
    // Let's check if the browser supports notifications
    if (!("Notification" in window)) {
      alert("This browser does not support desktop notification");
    }

    // Let's check if the user is okay to get some notification
    else if (Notification.permission === "granted") {
      // If it's okay let's create a notification
      var notification = new Notification("Hi there!");
    }

    // Otherwise, we need to ask the user for permission
    // Note, Chrome does not implement the permission static property
    // So we have to check for NOT 'denied' instead of 'default'
    else if (Notification.permission !== 'denied') {
      Notification.requestPermission(function (permission) {

        // Whatever the user answers, we make sure we store the information
        if(!('permission' in Notification)) {
          Notification.permission = permission;
        }

        // If the user is okay, let's create a notification
        if (permission === "granted") {
          var notification = new Notification("Hi there!");
        }
      });
    }

    // At last, if the user already denied any notification, and you
    // want to be respectful there is no need to bother him any more.
  }
  setInterval(function() {
      $.get('/messages', function(data) {
            $("#message-container").html(data);
            notifyMe();
          }
      );
  }, 5000);
  $(document).ready(function() {
    $("#message").focus();
  });
